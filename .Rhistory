plot<-ggplot(timeset,aes(x=year,y=0))
plot<-plot+geom_segment(aes(y=0,yend=y,xend=year))
plot<-plot+geom_text(aes(y=ytext,label=paste(text, "\n", labelDate, sep=" ")),size=2.5,vjust=-.5)# add dates here
plot<-plot+geom_point(aes(y=y))
plot<-plot+scale_y_continuous(limits=c(-2.5,2))
plot<-plot+geom_hline(y=0,size=1.5,color='orange')   #draw a horizontal line
# this adds arrow, kinda ugly
plot<-plot+geom_segment(x=2013.2,xend=2013.49,y=.1,yend=0,color='orange',size=1.5)+
geom_segment(x=2013.2,xend=2013.49,y=-.1,yend=0,color='orange',size=1.5) #drawing the actual arrow
plot<-plot+opts(axis.text.y =theme_blank(),
title='A Schumwinger Decade',
panel.background = theme_blank(),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.border = theme_blank(),
axis.ticks = theme_blank(),
axis.text.x = theme_blank()
)
plot<-plot+ylab('')+xlab('')
plot <- plot
print(plot)
plot<-ggplot(timeset,aes(x=year,y=0))
plot<-plot+geom_segment(aes(y=0,yend=y,xend=year))
plot<-plot+geom_text(aes(y=ytext,label=paste(text, "\n", labelDate, sep=" ")),size=2.5,vjust=-.5)# add dates here
plot<-plot+geom_point(aes(y=y))
plot<-plot+scale_y_continuous(limits=c(-2.5,2))
plot<-plot+geom_hline(y=0,size=1.5,color='orange')   #draw a horizontal line
# this adds arrow, kinda ugly
plot<-plot+geom_segment(x=2013.2,xend=2013.49,y=.1,yend=0,color='orange',size=1.5)+
geom_segment(x=2013.2,xend=2013.49,y=-.1,yend=0,color='orange',size=1.5) #drawing the actual arrow
plot<-plot+opts(axis.text.y =theme_blank(),
title='A Schumwinger Decade',
panel.background = theme_blank(),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.border = theme_blank(),
axis.ticks = theme_blank(),
axis.text.x = theme_blank()
)
plot<-plot+opts(plot.margin = unit(c(1,1,3,1), "cm")
plot<-plot+ylab('')+xlab('')
plot <- plot
print(plot)
plot<-ggplot(timeset,aes(x=year,y=0))
plot<-plot+geom_segment(aes(y=0,yend=y,xend=year))
plot<-plot+geom_text(aes(y=ytext,label=paste(text, "\n", labelDate, sep=" ")),size=2.5,vjust=-.5)# add dates here
plot<-plot+geom_point(aes(y=y))
plot<-plot+scale_y_continuous(limits=c(-2.5,2))
plot<-plot+geom_hline(y=0,size=1.5,color='orange')   #draw a horizontal line
# this adds arrow, kinda ugly
plot<-plot+geom_segment(x=2013.2,xend=2013.49,y=.1,yend=0,color='orange',size=1.5)+
geom_segment(x=2013.2,xend=2013.49,y=-.1,yend=0,color='orange',size=1.5) #drawing the actual arrow
plot<-plot+opts(axis.text.y =theme_blank(),
title='A Schumwinger Decade',
panel.background = theme_blank(),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.border = theme_blank(),
axis.ticks = theme_blank(),
axis.text.x = theme_blank()
)
plot<-plot+ylab('')+xlab('')
plot <- plot
print(plot)
3^4
4^3
list <- c(2,2,2,2,2)
mean(list)
sd(list)
x <- c(.3,.2,.1,.2,.1,.1)
quantile(x)
?quantile
?as.matrix
a <- matrix(c(1,2,2,5),2,2)
a
b <- matrix(c(-1,1),2,1)
b
c <- matrix(c(3,0),2,1)
c
a*b
x <- a*b
a*a
b*c
d <- matrix(c(1,3),2,1)
d
d+c
?mean
mean(c(80,125,140,85))
sd?
?sd
sd(c(1,2,3,4,5))
sqrt(2)
sqrt(15)
mean(c(1,2,3,4,5))
3/2
-1-1
4/3
m <- matrix(c(26,-36,18,-25),2,2)
m
m <- matrix(c(26,18,-36,-25),2,2)
m
m*m*m*m
m^4
a1 <- matrix(c(4,3,3,2))
a1
a1 <- matrix(c(4,3,3,2),2,2)
a1
b <- matrix(c(-1,0,0,2),2,2)
b
a <- matrix(c(-2,3,3,-4),2,2)
a
a1*b*a
m2 < - a1*b*a
m2 <- a1*b*a
m2
m2^4
m2*m2*m2*m2
s <- sum(c(1,2,3,4,5,6))
s
7*3.5
4.5*6
3.5/2
1.75*6
s <- sum(c(1,2,3,4,5,6,7,8,9,10))
s
11*5
10*6
10*2.5
install.packages("XLConnect")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
library("XLConnectJars", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
detach("package:XLConnect", unload=TRUE)
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
install.packages("XLConnectJars")
library("XLConnectJars", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
remove.packages("XLConnectJars")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
detach("package:XLConnect", unload=TRUE)
remove.packages("XLConnect")
install.packages("XLConnect")
library("XLConnectJars", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
table(StC$Index)
9.49+4.99+14.98+28.49
70629+775+316+411+1064-349
library (ILSR)
library (ISLR)
attach(Wage)
wage = Wage
fit = lm(wage~poly(age, 4), data=Wage)
poly(age, 4)
?coef
coef(summary(fit))
?poly
poly = poly(age, 4)
poly = poly(age, 3)
poly = poly(age, 2)
head(poly)
poly = poly(age, 1)
head(poly)
plot(poly)
poly = poly(age, 2)
head(poly)
plot(poly)
poly = poly(1, 2)
head(poly)
plot(poly)
poly = poly(10, 2)
poly = poly(10, 4)
poly = poly(2, 4)
fit = lm(wage~poly(age, 4), data=Wage)
coef(summary(fit))
poly = poly(age, 4)
head(poly)
plot(poly)
fit
str(fit)
fit = lm(wage~poly(age, 4), data=Wage, raw=T)
fit = lm(wage~poly(age, 4), raw=T,data=Wage)
fit = lm(wage~poly(age, 4, raw=T), data=Wage)
coef(summary(fit))
poly = poly(age, 4)
head(poly)
plot(poly)
agelims=range(age)
age.grid=seq(from=agelims[1], to=agelimes[2])
age.grid=seq(from=agelims[1], to=agelies[2])
age.grid=seq(from=agelims[1], to=agelims[2])
age.grid
?seq
preds = predict(fit, newdata=list(age=age.grid), se=TRUE)
list(age=age.grid)
t = list(age=age.grid)
t
t = list(age=age.grid, foo=age.grid^2)
t$foo
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(1,2), mar=c(4.5,4,5,1,1), oma-c(0,0,4,0))
par(mfrow=c(1,2), mar=c(4.5,4,5,1,1), oma=c(0,0,4,0))
par(mfrow=c(1,2), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
rm(wage)
attach(Wage)
fit = lm(wage~poly(age, 4, raw=T), data=Wage)
coef(summary(fit))
agelims=range(age)
age.grid=seq(from=agelims[1], to=agelims[2])
preds = predict(fit, newdata=list(age=age.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(1,2), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial", outer=T)
lines(age.grid, preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue", lty=3)
?matlines
?anova
fit.1=lm(wage~age, data=Wage)
fit.2=lm(wage~poly(age, 2, raw=T), data=Wage))
fit.2=lm(wage~poly(age, 2, raw=T), data=Wage)
fit.3=lm(wage~poly(age, 3, raw=T), data=Wage)
fit.4=lm(wage~poly(age, 4, raw=T), data=Wage)
fit.5=lm(wage~poly(age, 5, raw=T), data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
print(anova)
fit=glm(I(wage>250)~poly(age,4), data=Wage, family=binomial)
preds=predict(fit,newdata=list(age=age.grid),se=T)
pfit=exp(pred$fit)/(1+exp(preds$fit))
pfit=exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
se.bands=exp(se.bands.logit)/(1+exp(se.bands.logit))
plot(age,I(wage>250), xlim=agelims, type="n", ylim=c(0,.2))
points(jitter(age), I((wage>250)/5), cex=.5,pch="|", col="darkgrey")
lines(age.grid, pfit,lwd=2,col="blue")
matlines(age.grid, se.bands, lwd=1, col="blue",lty=3)
?cut
library(splines)
fit=lm(wage~bs(age,knots=c(26,40,60)),data=Wage)
pred=predict(fit,newdata=list(age=age.grid),se=T)
plot(age,wage,col="grey")
lines(age.grid,pred$fit,lwd=2)
lines(age.grid,pred$fit+2*pred$se,lty="dashed")
lines(age.grid,pred$fit-2*pred$se,lty="dashed")
dim(bs(age,knots=c(25,40,60)))
dim(bs(age,df=6))
attr(bs(age,df=6),"knots")
?attr
fit2=lm(wage~ns(age,df=4), data=Wage)
pred2=predict(fit2,newdata=list(age=age.grid), se=T)
lines(age.grid,pred$fit2, col="red", lwd=2)
lines(age.grid,pred2$fit, col="red", lwd=2)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Smoothing Spline")
fit=smooth.spline(age,wage,df=16)
fit2=smooth.spline(age,wage,cv=TRUE)
fit2$df
lines(fit,col="red"lwd=2)
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
legend("topright", legend=c("16 DF", "6.8 DF"), col=c("red","blue"), lty=1, lwd=2, cex=.8)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Local Regression")
fit=loess(wage~age,span=.2,data=Wage)
fit2=loess(wage~age,span=.5,data=Wage)
lines(age.grid,predict(fit,data.frame(age=age.grid)),col="red",lwd=2)
lines(age.grid,predict(fit2,data.frame(age=age.grid)),col="blue",lwd=2)
legend("topright", legend=c("Span=0.2","Span=0.5"),col=c("red","blue"),lty=1,lwd=2,cex=.8)
?ns
gam1=lm(wage~ns(year,4)+ns(age,5)+education, data=Wage)
test=predict(gam1,newdata=list(age=age.grid),se=T)
library(gam)
install.packages("gam")
library(gam)
gam.m3=gam(wage~s(year,4)+s(age,5)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam.m3, se=TRUE, col="red")
table(Wage$year)
gam1=lm(wage~ns(year,4)+ns(age,5)+education,data=Wage)
plot.gam(gam1,se=TRUE,col+"red")
plot.gam(gam1,se=TRUE,col="red")
gam.m1(gam(wage~s(age,5)+education, data=Wage))
gam.m1=gam(wage~s(age,5)+education, data=Wage))
gam.m1=gam(wage~s(age,5)+education, data=Wage)
gam.m2=gam(wage~year+s(age,5)+education,data=Wage)
anova(gam.m1,gam.m2,gam.m3,test="F")
summary(gam.m3)
preds=predict(gam.m2,newdata=Wage)
gam.lo=gam(wage~s(year,df=4)+lo(age,span=0.7)+education,data=Wage)
plot.gam(gam.lo,se=TRUE,col="green")
gam.lo.i=gam(wage~lo(year,age,span=0.5)+education,data=Wage)
plot(gam.lo.i)
library(akima)
install.packages("akima")
library(akima)
plot(gam.lo.i)
gam.lr=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage)
par(mfrow=c(1,3))
plot(gam.lr,se=T,col="green")
table(education,I(wage>250))
gam.lr.s=gam(I(wage>250)~year+s(age,df=5)+edcuation,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
gam.lr.s=gam(I(wage>250)~year+s(age,df=5)+education,family=binomial,data=Wage,subset=(education!="1. < HS Grad"))
plot(gam.lr.s,se=T,col="green")
summary(Auto)
pairs(Auto)
fit = lm(wage~poly(age, 4, raw=T), data=Wage)
coef(summary(fit))
agelims=range(age)
age.grid=seq(from=agelims[1], to=agelims[2])
preds = predict(fit, newdata=list(age=age.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(1,2), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
title("Degree-4 Polynomial", outer=T)
lines(age.grid, preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd=1,col="blue", lty=3)
attach(Auto)
?xlim
plot(mpg,accleration,cex=.5,col="darkgrey")
plot(mpg,acceleration,cex=.5,col="darkgrey")
fit = lm(mpg~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
str(Auto)
summary(Auto)
table(Auto$mpg)
table(Auto$year)
plot(year,acceleration,cex=.5,col="darkgrey")
plot(year,mpg,cex=.5,col="darkgrey")
plot(year,weight,cex=.5,col="darkgrey")
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
preds = predict(fit, newdata=list(year=year.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(1,2), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(year,acceleration,xlim=yearlims,cex=.5,col="darkgrey")
title("Degree-6 Polynomial", outer=T)
lines(year.grid, preds$fit,lwd=2,col="blue")
matlines(year.grid,se.bands,lwd=1,col="blue", lty=3)
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
preds = predict(fit, newdata=list(year=year.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(1,2), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(year,acceleration,xlim=yearlims,cex=.5,col="darkgrey")
title("Degree-6 Polynomial", outer=T)
lines(year.grid, preds$fit,lwd=2,col="blue")
summary(Auto)
pairs(Auto) #consider acceleration, year, mpg
attach(Auto)
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
summary(fit)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
newdata=list(year=year.grid)
preds = predict(fit, newdata=list(year=year.grid), se=TRUE)
fit = lm(wage~poly(age, 4, raw=T), data=Wage)
coef(summary(fit))
agelims=range(age)
age.grid=seq(from=agelims[1], to=agelims[2])
preds = predict(fit, newdata=list(age=age.grid), se=TRUE)
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
preds = predict(fit, newdata=list(year=year.grid), se=TRUE)
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
newdata=list(year=year.grid)
newdata=list(age=age.grid)
age.grid=seq(from=agelims[1], to=agelims[2])
agelims=range(age)
age.grid=seq(from=agelims[1], to=agelims[2])
newdata=list(age=age.grid)
newdata=list(year=year.grid)
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
preds = predict(fit, newdata=list(year=year.grid), se=TRUE)
fit = lm(year~poly(acceleration, 6, raw=T), data=Auto)
coef(summary(fit))
yearlims=range(year)
year.grid=seq(from=yearlims[1], to=yearlims[2])
preds = predict(fit, newdata=list(year=year.grid), se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
par(mfrow=c(1,2), mar=c(4.5,4.5,1,1), oma=c(0,0,4,0))
plot(year,acceleration,xlim=yearlims,cex=.5,col="darkgrey")
title("Degree-6 Polynomial", outer=T)
lines(year.grid, preds$fit,lwd=2,col="blue")
matlines(year.grid,se.bands,lwd=1,col="blue", lty=3)
pred$fit
preds$fit
fit = lm(wage~poly(age, 4, raw=T), data=Wage)
coef(summary(fit))
agelims=range(age)
age.grid=seq(from=agelims[1], to=agelims[2])
preds = predict(fit, newdata=list(age=age.grid), se=TRUE)
summary(Wage)
str(Wage)
# path to kaggle data and other files
#setwd("C:\\Users\\mlewo_000\\Documents\\GitHub\\https---github.com-MatthewSchumwinger-towerProperty\\towerProperty")
setwd("~/Documents/towerProperty") # Matt's wd path
source("config.r")
source("helpers.r")
source("data.r")
library(gbm)
setConfigForMyEnvironment() # special helper function for Matt's environment
includeLibraries()
filter = ""
rawData = readData(FALSE)
allPredictors = preparePredictors(rawData, filter)
allData = prepareSplits(rawData, allPredictors, c(0))
useLogTransform = FALSE
numfolds = 10
rawData = readData(useLogTransform)
formula = prepareFormula(useLogTransform)
set.seed(551724)
folds = sample(1:numfolds, nrow(allData$allSet), replace=T)
while(TRUE) {
set.seed(as.numeric(Sys.time()))
tokens = c("199", "200", "2000|2001|2002|2003|2004", "2005|2006|2007|2008", "2009", "2010", "2011", "2012",
"price.level", "add_no", "TELEMAN|JOHANN|ROSSINI",  "HANDEL", "VIVALDI", "HAYDN", "BACH",
"conc_missed", "add_price", "add_tickets", "add_tickets_seats", "multiple.subs", "is.us",
"relationship", "outside", "City", "State", "Lat|Long",
"2.years", "3.years", "4.years|5.years", "6.years|7.years|8.years",
"donating", "package", "no.seats", "location", "total")
setTrees = c(500, 1000, 1500, 2000, 2500, 3000, 4000, 2000, 2500, 3000, 4000, 5000, 6000, 8000, 10000, 15000)
setShrinkage = c(0.001, 0.001, 0.001, 0.001, 0.0005, 0.002, 0.005, 0.01)
setBagfrac = c(0.5, 0.5, 0.5, 0.66, 0.4, 0.6)
setDepths = c(1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 9, 10)
setDistrib = c("gaussian", "tdist", "laplace")
setDF = c(1, 2, 3, 4, 6, 10, 15, 50, 100, 500, 1000)
start_filter = "billing.city|section_2013_2014"
numTokens = sample(1:length(tokens), 1)
selected = sample(1:length(tokens), numTokens, replace=FALSE)
filter = paste(c(start_filter, paste(tokens[selected], collapse="|")), collapse="|")
trees = setTrees[sample(1:length(setTrees), 1)]
shrinkage = setShrinkage[sample(1:length(setShrinkage), 1)]
bagfrac = setBagfrac[sample(1:length(setBagfrac), 1)]
depth = setDepths[sample(1:length(setDepths), 1)]
distrib = setDistrib[sample(1:length(setDistrib), 1)]
df = setDF[sample(1:length(setDF), 1)]
while( ((trees > 5000) && (depth > 5) && (numTokens < 26)) ||
((trees > 6000) && (depth > 3) && (numTokens < 28)) ||
((trees > 8000) && (depth > 2) && (numTokens < 30))
)
{
trees = setTrees[sample(1:length(setTrees), 1)]
depth = setDepths[sample(1:length(setDepths), 1)]
}
print(paste("filter=", filter))
print(paste("trees=", trees))
print(paste("bagfrac=", bagfrac))
print(paste("depth=", depth))
print(paste("distrib=", distrib))
print(paste("df=", df))
predictors = preparePredictors(rawData, filter)
testError = 0
testErrorInact = 0
testErrorVar = 0
for(i in 1:numfolds) {
print(paste("Starting fold", i))
data = prepareSplits(rawData, predictors, which(folds == i))
# data = cleanData(data)
if(distrib == "tdist") {
gbm.orch = gbm(formula, data = data$trainSet, distribution = list(name="tdist", df=df),
bag.fraction = bagfrac, shrinkage = shrinkage, n.trees = trees, interaction.depth = depth)
} else {
gbm.orch = gbm(formula, data = data$trainSet, distribution = distrib,
bag.fraction = bagfrac, shrinkage = shrinkage, n.trees = trees, interaction.depth = depth)
}
summary(gbm.orch)
gbm.boost = predict(gbm.orch , newdata=data$testSet, n.trees=trees)
print("Raw prediction")
testError = testError + evaluateModel(gbm.boost, data$testAnswers, useLogTransform)
if(i == 1 && testError > 0.12)
{
break;
}
print("Adjusting for inactive")
adjusted = adjustPredictionsInactive(gbm.boost, data.frame("account.id"=data$testAccounts), allData$predictors)
testErrorInact = testErrorInact + evaluateModel(adjusted, data$testAnswers, useLogTransform)
print("Adjusting for invariance")
adjusted2 = adjustPredictionsInvariant(gbm.boost, data.frame("account.id"=data$testAccounts), allData$predictors)
testErrorVar = testErrorVar + evaluateModel(adjusted2, data$testAnswers, useLogTransform)
}
if(i == 10)
{
tries = numfolds
print(paste("Final test error raw prediction=", testError / tries, " based on ", tries, " tries"))
print(paste("Final test error with inactive adj=", testErrorInact / tries, " based on ", tries, " tries"))
print(paste("Final test error with no variance adj =", testErrorVar / tries, " based on ", tries, " tries"))
data=cbind(filter,trees,bagfrac,shrinkage,depth,distrib,df)
threshold = 0.0925
if((testError/tries) < threshold) {
write.csv(data, paste(testError, "_raw_", format(Sys.time(), "%b_%d_%Y"),".csv", sep=""), row.names = F)
}
if((testErrorInact/tries) < threshold) {
write.csv(data, paste(testError, "_inact_", format(Sys.time(), "%b_%d_%Y"),".csv", sep=""), row.names = F)
}
if((testErrorVar/tries) < threshold) {
write.csv(data, paste(testError, "_invar_", format(Sys.time(), "%b_%d_%Y"),".csv", sep=""), row.names = F)
}
}
}
